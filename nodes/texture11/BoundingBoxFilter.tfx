//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
float4x4 tW;
float3 boundsMin;
float3 boundsMax;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 c = texture2d.Sample(linearSampler,input.uv);
	c = mul(float4(c.rgb,1), tW);
	if ((boundsMin.x<c.x)&&(boundsMax.x>c.x)
	  &&(boundsMin.y<c.y)&&(boundsMax.y>c.y) 
	  &&(boundsMin.z<c.z)&&(boundsMax.z>c.z)) 	
	{
		c = 1;
	} else
	{
		c = 0;
	}
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



